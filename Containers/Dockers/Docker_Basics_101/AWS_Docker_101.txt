INSTALL DOCKER IN AMI LINUX
sudo yum update
sudo yum install -y docker
sudo usermod -a -G docker ec2-user
sudo service docker start
sudo chkconfig docker on
Optionally, create a new user for Docker management and add him to Docker (default) group
useradd dockeradmin
passwd dockeradmin
usermod -aG docker dockeradmin
INSTALL DOCKER-COMPOSE
sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` | sudo tee /usr/local/bin/docker-compose > /dev/null
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
docker-compose --version




https://hub.docker.com/_/postgres
THE BASICS
docker run postgres
docker pull postgres
docker run postgres -e POSTGRES_PASSWORD=password postgres
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
docker run postgress:9.6
docker run postgres -e POSTGRES_PASSWORD=password postgres


docker run 
docker pull 
docker pull ubuntu 
docker images | head 
docker ps 
docker ps -a 

docker start f2k3k5l6k6 


docker logs containerID 
docker logs -f containerID 

docker exec -it  contendorit  sh
ls

docker ps
docker stop contendorid
docker ps

docker run -d contenedorid 
docker ps
docker logs -f contanienrID
docker ps
docker stop containerid containerid
docker ps
clear

APPS with DOCKERS
wget https://unir-profesantos.s3.eu-west-1.amazonaws.com/docker-basics-101.zip


docker images | grep alpine 

docker build  -t getting-started .   

docker ps 
docker run getting-started
localhost:3000 
docker run -dp 3000:3000 getting-started
docker ps
https://localhost:3000

docker ps
docker stop containerid
docker run -dp 3000:3000 getting-started 
docker ps
https://localhost:3000 
docker stop containerid
docker run  -d -v $PWD:/etc/todos -p 3000:3000 getting-started
docker ps
docker stop contaniner id
docker run  -d -v SPWD:/etc/todos -p 3000:3000 getting-started
http://localhost:3000 
ls 
docker stop containerid

vim src/static/js/app.js  (cambiar cosa por Item)
docker run  -d -v $PWD/app/etc:/etc/todos -p 3000:3000  -v $PWD/app/src:/app/src getting-started
http://localhost:3000 
vim app/src/static/js/app.js  
http://localhost:3000
docker build -t getting-starterd:v2 .     


SUBIR IMAGENES
docker login   
docker images | head
docker tag containerid santospardos/getting-started:v2
docker images  
dockier push santospardos/getting-started:v2    

VARIOS CONTENEDORES
ls
mkdir multi-container
cd  multi-container

docker network create todo-app
docker run -d \
--network todo-app --network-alias mysql \
-v todo-mysql-data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=secret \
-e MYSQL_DATABASE=todos \
mysql:5.7

docker ps
docker exec -it containerid mysql -p 
show databases;  
docker run -it --network todo-app nicolaka/netshoot
dig mysql    

docker run -dp 3000:3000 \
--network todo-app \
-e MYSQL_HOST=mysql \
-e MYSQL_USER=root \
-e MYSQL_PASSWORD=secret \
-e MYSQL_DB=todos \
getting-started:v2

docker ps   
http://localhost:3000 
docker ps
docker logs containerID 
http://localhost:3000  
docker stop contaninerid

docker run -dp 3000:3000 \
--network todo-app \
-e MYSQL_HOST=mysql \
-e MYSQL_USER=root \
-e MYSQL_PASSWORD=secret \
-e MYSQL_DB=todos \
getting-started:v2

tambien se conectada y tiene los datos en 
http://localhost:3000 


DOCKER COMPOSE 
docker stop containerID containeriD
docker compose
vim docker-compose.yaml



LOAD - SAVE - EXPORT - IMPORT
docker --help | grep -E "(export|import|load|save)"

FROM busybox
CMD echo $((40 + 2))

docker build --tag calc .
docker image ls
docker run calc
docker save calc > calc.tar
rsync calc.tar santos@work:/tmp/
docker import calc.tar calc
docker run calc

docker save calc > calc.tar
mkdir calc && tar -xf calc.tar -C calc
tree calc
docker image ls
docker load < calc.tar
docker image ls
docker run calc

docker container ls --all
docker export a8b14091b4e7 > calc-container.tar
mkdir calc-container && tar -xf calc-container.tar -C calc-container
tree -L 1 calc-container
docker import calc-container.tar calcfs:latest
docker image ls
docker container --help | grep -E "(export|import|load|save)"
docker image --help | grep -E "(export|import|load|save)"


docker system prune -a

Docker Command Dictionary
# Remove Images 
 docker rmi -f $(docker images -a -q)
https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes-es
https://www.baeldung.com/ops/docker-removing-imagesgit
https://www.baeldung.com/ops/docker-removing-images
# Credential Store https://docs.docker.com/engine/reference/commandline/login/#credentials-store     $HOME/.docker/config.json
# Get a local Shell of container
      docker run -i -t --entrypoint /bin/bash imageID
# Create image using this directory's Dockerfile
      docker build -t friendlyname .     
# Run "friendlyname" mapping port 4000 to 80
      docker run -p 4000:80 friendlyname    
# Same thing, but in detached mode
      docker run -d -p 4000:80 friendlyname            
# See a list of all running containers
     docker ps          
# Gracefully stop the specified container
     docker stop <hash>                        
# See a list of all containers, even the ones not running
     docker ps -a              
# Force shutdown of the specified container
     docker kill <hash>                     
 # Remove the specified container from this machine
     docker rm <hash>                 
# Remove all containers from this machine
     docker rm $(docker ps -a -q)              
# Show all images on this machine
     docker images -a                                  
# Remove the specified image from this machine
     docker rmi <imagename>               
# Remove all images from this machine
     docker rmi $(docker images -q)                
# Log in this CLI session using your Docker credentials
     docker login                
# Tag <image> for upload to registry
     docker tag <image> username/repository:tag     
# Upload tagged image to registry
     docker push username/repository:tag               
# Run image from a registry
     docker run username/repository:tag    
# Docker container prune
     docker container prune
































